name: ci

on: [pull_request] # yamllint disable-line rule:truthy

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull-request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read
  checks: write # Used to annotate code in the PR

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b  # v5.4.0
      with:
        go-version-file: "go.mod"
    - name: build
      run: |
        go build -v ./...
  linting:
    needs: [build]
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b  # v5.4.0
      with:
        go-version-file: "go.mod"
    - name: gofmt
      run: |
        gofmt_out=$(gofmt -d $(find * -name '*.go' ! -path 'vendor/*' ! -path 'third_party/*'))
        if [[ -n "$gofmt_out" ]]; then
            failed=1
        fi
        echo "$gofmt_out"
    - name: golangci-lint
      uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd  # v7.0.0
      with:
        version: v2.1.2
        only-new-issues: true
        args: --timeout=10m
    - name: yamllint
      run: |
        apt update && apt install -y yamllint
        yamllint -c .yamllint $(find . -path ./vendor -prune -o -type f -regex ".*y[a]ml" -print | tr '\n' ' ')
    - name: check-license
      run: |
        go install github.com/google/go-licenses@v1.0.0
        go-licenses check ./...
  tests:
    needs: [build]
    name: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b  # v5.4.0
      with:
        go-version-file: "go.mod"
    - name: unit
      run: |
        go test -v -race -timeout 5m ./...
    - name: Run tests with coverage
      run: |
        make test-unit-coverage
    - name: Post coverage comment
      run: |
        TOTAL_COV=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "Total test coverage: $TOTAL_COV"
        echo "COVERAGE=$TOTAL_COV" >> $GITHUB_ENV
        
        # Create a comment for the PR
        echo "## Test Coverage Report" > coverage_comment.md
        echo "Total coverage: $TOTAL_COV" >> coverage_comment.md
        echo "" >> coverage_comment.md
        echo "### Coverage by Package" >> coverage_comment.md
        echo '```' >> coverage_comment.md
        go tool cover -func=coverage.out | grep -v "total:" >> coverage_comment.md
        echo '```' >> coverage_comment.md
        
    - name: Find Comment
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "## Test Coverage Report"
        
    - name: Create or update coverage comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-file: coverage_comment.md
        edit-mode: replace
  # e2e-tests:
  #   needs: [build]
  #   uses: ./.github/workflows/e2e-matrix.yml
